# Rime schema
# encoding: utf-8
patch:
  schema/name: 双拼
  switches:
    # - name: ascii_mode
    #   reset: 0
    #   states: [ 中文, 西文 ]
    - name: simplification
      reset: 1
      states: [ 漢字, 汉字 ]
    - name: emoji_suggestion
      reset: 1
      states: [ "No", "Yes" ]
    - name: full_shape
      states: [ 半角, 全角 ]
    - name: ascii_punct
      states: [ 。，, ．， ]
  engine/translators:
    - lua_translator@date_translator
    - lua_translator@week_translator
    - punct_translator
    - script_translator
    - table_translator@custom_phrase
  engine/filters:
    - simplifier@emoji_suggestion
    #- simplifier@zh_simp
    - simplifier
    - uniquifier
    #- charset_filter@gbk
    - single_char_filter
  engine/processors:
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  # engine/segmentors:
  #   - ascii_segmentor
  #   - matcher
  #   - abc_segmentor
  #   - punct_segmentor
  #   - fallback_segmentor
  ascii_composer: # 设置caps、shift、control等键的作用
    good_old_caps_lock: false # 若为true，caps只切换大小写
    switch_key:
      Shift_L: commit_code
      Shift_R: commit_text
      Control_L: noop
      Control_R: noop
      Caps_Lock: noop
      Eisu_toggle: clear
  emoji_suggestion:
    opencc_config: emoji.json
    option_name: emoji_suggestion
    # tips: all
  switches/@next:
    name: symbol_support
    reset: 1
    states: [ "无符", "符" ]
  'engine/filters/@before 0':
    simplifier@symbol_support
  symbol_support:
    opencc_config: symbol.json
    option_name: symbol_support
    # tips: all
  
  #載入朙月拼音擴充詞庫
  "translator/dictionary": luna_pinyin.extended
  'translator/preedit_format': {}
  # translator/enable_correction: true

  # 自定义符号上屏
  punctuator:
    import_preset: symbols
    # 自定义快捷符号输入
    # symbols:
    #   "/fs": [½, ‰, ¼, ⅓, ⅔, ¾, ⅒ ]
    half_shape:
      "#": "#"
      "*": "*"
      "`": "`"
      "~": "~"
      "@": "@"
      "=": "="
      "/": "/"
      '\': "、"
      # "_" : ["_", "──"]
      "'": {pair: ["「", "」"]}
      "[": ["【", "["]
      "]": ["】", "]"]
      "$": ["¥", "$", "€", "£", "¢", "¤"]
      "<": ["《", "〈", "«", "<"]
      ">": ["》", "〉", "»", ">"]

  recognizer/patterns/punct: "^/([0-9]0?|[A-Za-z]+)$"

  ### 双拼使用自定义词典 custom_phrase.txt
  custom_phrase:
    dictionary: ""
    user_dict: custom_phrase
    db_class: stabledb
    enable_completion: false
    enable_sentence: false
    initial_quality: 1
  "engine/translators/@5": table_translator@custom_phrase
# Rx: BlindingDark/rime-easy-en:customize:schema=double_pinyin_flypy
  # __include: easy_en:/patch
  # easy_en/enable_sentence: false # 中英文混输的设置
# Rx: lotem/rime-octagram-data:customize:schema=luna_pinyin,model=hans
  __include: grammar:/hant
# Rx: BlindingDark/rime-lua-select-character:customize:schema=luna_pinyin {
  __include: lua_select_character:/patch
# }
  key_binder/bindings: # 设置哪些键可以翻页，需要哪个取消注释即可
  # - { when: composing, accept: Tab, send: Page_Up } # Tab 翻页
  # - { when: composing, accept: Tab, send: Right } # Tab 移动光标向右
  # - { when: composing, accept: Shift+Tab, send: Page_Up }
  # - { when: paging, accept: minus, send: Page_Up }
  # - { when: has_menu, accept: equal, send: Page_Down }
  # - { when: paging, accept: bracketleft, send: Page_Up }
  # - { when: has_menu, accept: bracketright, send: Page_Down }
  # - {accept: "Control+p", send: Up, when: composing}
  # - {accept: "Control+n", send: Down, when: composing}
  # - {accept: "Control+b", send: Left, when: composing}
  # - {accept: "Control+f", send: Right, when: composing}
  # - {accept: "Control+a", send: Home, when: composing}
  # - {accept: "Control+e", send: End, when: composing}
  # - {accept: "Control+d", send: Delete, when: composing}
  # - {accept: "Control+k", send: "Shift+Delete", when: composing}
  # - {accept: "Control+h", send: BackSpace, when: composing}
  # - {accept: "Control+g", send: Escape, when: composing}
  # - {accept: "Control+bracketleft", send: Escape, when: composing}
  # - { when: has_menu, accept: semicolon, send: 2 }
  # - { when: has_menu, accept: apostrophe, send: 3 }
  # - {accept: comma, send: Page_Up, when: paging}
  # - {accept: period, send: Page_Down, when: has_menu}
  # - {accept: "Control+Shift+1", select: .next, when: always}
  # - {accept: "Control+Shift+2", toggle: ascii_mode, when: always}
  # - {accept: "Control+Shift+3", toggle: full_shape, when: always}
  - {accept: "Control+Shift+0", toggle: simplification, when: always}
  # - {accept: "Control+Shift+5", toggle: extended_charset, when: always}
  # - {accept: "Control+Shift+exclam", select: .next, when: always}
  # - {accept: "Control+Shift+at", toggle: ascii_mode, when: always}
  # - {accept: "Control+Shift+numbersign", toggle: full_shape, when: always}
  # - {accept: "Control+Shift+dollar", toggle: simplification, when: always}
  # - {accept: "Control+Shift+percent", toggle: extended_charset, when: always}
  # - {accept: "Shift+space", toggle: full_shape, when: always}
  # - {accept: "Control+period", toggle: ascii_punct, when: always}
